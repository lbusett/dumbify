% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/dumbify.R
\name{dumbify}
\alias{dumbify}
\title{dumbify}
\usage{
dumbify(in_data, in_names, out_names = NULL)
}
\arguments{
\item{in_data}{\code{data.frame} or \code{data.table}}

\item{in_names}{\code{character array} containing names of the variables containing
the names of the columns of \code{in_data} needed for the analysis}

\item{out_names}{\code{character array} containing names to which the columns on
selected in \code{in_names} should be changed to needed for the analysis. If NULL,
out_names are reset to the names of the names of the variables passed as \code{in_names}
(see examples),  Default: NULL}
}
\value{
a copy of \code{in_data} with replaced column names
}
\description{
function to automatically rename columns in an input data frame
or data table \emph{within a function} so that columns needed for the analysis
can be easily accessed.
}
\details{
To avoid loss of data, the function checks beforehand to see if any
columns in \code{in_data} are named as one of \code{out_names}. In that case, the names
of those columns are replaced as "!!\emph{!!}"
}
\examples{
\dontrun{
in_data = iris
dumb_addcol <- function(in_data, ADD_1_VAR, ADD_2_VAR) {
  out_data <- in_data \%>\%
     dumbify(in_names = c(ADD_1_VAR, ADD_2_VAR)) \%>\%
     dplyr::mutate(sum = ADD_1_VAR + ADD_2_VAR) \%>\%
     undumbify(c(ADD_1_VAR, ADD_2_VAR))
 out_data
 }
 ADD_1_VAR   <- "Petal.Length"
 ADD_2_VAR   <- "Petal.Width"
 out <- dumb_addcol(in_data, ADD_1_VAR, ADD_2_VAR)
 head(out)
 ADD_2_VAR   <- "Sepal.Length"
 out <- dumb_addcol(in_data, ADD_1_VAR, ADD_2_VAR)
 head(out)
}
}
\author{
Lorenzo Busetto, phD (2017) \href{mailto:lbusett@gmail.com}{lbusett@gmail.com}
}
